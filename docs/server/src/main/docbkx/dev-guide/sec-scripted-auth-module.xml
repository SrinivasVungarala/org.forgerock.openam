<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2014-2015 ForgeRock AS.
  !
-->
<section xml:id='sec-scripted-auth-module'
         xmlns='http://docbook.org/ns/docbook'
         version='5.0'
         xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
         xsi:schemaLocation='http://docbook.org/ns/docbook
                     http://docbook.org/xml/5.0/xsd/docbook.xsd'>
 <title>Default Server-side Authentication Script</title>

 <indexterm>
  <primary>Scripts</primary>
  <secondary>Server-side Authentication</secondary>
 </indexterm>

 <para>
  This section demonstrates how to use the default server-side authentication
  script in a Scripted Authentication module.
 </para>

<para>The default server-side authentication script only authenticates a
 subject when the current time on the OpenAM server is between 09:00 and 17:00.
The script also uses the <literal>logger</literal> and
 <literal>httpClient</literal> functionality provided in the scripting
 API. </para>
 <para>To examine the contents of the default server-side
                   authentication
  script in the OpenAM console browse to REALMS > Top Level Realm > Scripts,
  and then click Scripted Module - Server Side.</para>
 <para>For more information on the functions available for use in server-side
  authentication scripts, see <xref linkend="scripting-api"/>.</para>


  <section xml:id="sec-scripted-auth-module-prepare">
  <title>Preparing OpenAM</title>
<para>OpenAM requires a small amount of configuration before trying the example
 server-side authentication script. You must first create a Scripted
 authentication module, and then include it in an authentication chain, which
 can then be used when logging in to OpenAM.
</para>
     <para>The procedures in this section are:</para>
  <itemizedlist>
   <listitem>
    <para><xref linkend="proc-scripted-auth-module"/> </para>
   </listitem>
      <listitem>
    <para><xref linkend="proc-scripted-auth-chain"/> </para>
   </listitem>
  </itemizedlist>

    <procedure xml:id="proc-scripted-auth-module">
        <title>To Create a Scripted Authentication Module that Uses the Default
        Server-side Authentication Script</title>
       <para>In this procedure create a Scripted Authentication module, and
   link it to the default server-side authentication script.</para>
        <step>
            <para>Log in as an OpenAM administrator, for example <literal>amadmin</literal>.</para>
        </step>
        <step>
            <para>Click REALMS &gt; Top Level Realm &gt; Authentication &gt; Modules.</para>
        </step>
        <step>
            <para>On the Authentication Modules page, click Add Module.</para>
        </step>
        <step>
            <para>In the Create new Module dialog box, enter a module name,
             such as <literal>myScriptedAuthModule</literal>, in the Type
             drop-down menu, select <literal>Scripted Module</literal>, and then
             click Create.</para>
        </step>
        <step>
            <para>On the module configuration page:</para>
            <substeps>
                <step>
                    <para>Uncheck the Client-side script enabled checkbox.</para>
                </step>
                <step>
                    <para>In the Server-side Script drop-down menu, select
                    <literal>Scripted Module - Server Side</literal>.</para>
                </step>
                <step>
                    <para>Click Save Changes.</para>
                </step>
            </substeps>
        </step>
    </procedure>

    <procedure  xml:id="proc-scripted-auth-chain">
  <title>To Create an Authentication Chain that Uses a Scripted
   Authentication Module</title>
   <para>In this procedure create an authentication chain that
    uses a Data Store authentication module and the Scripted
    authentication module created in the previous procedure.</para>
    <step>
        <para>Log in as an OpenAM administrator, for example <literal>amadmin</literal>.</para>
    </step>
    <step>
        <para>Click REALMS &gt; Top Level Realm &gt; Authentication &gt; Chains.</para>
    </step>
    <step>
        <para>On the Authentication Chains page, click Add Chain.</para>
    </step>
    <step>
        <para>In the Create new chain dialog box, enter a chain name, such as
        <literal>myScriptedChain</literal>, and then click Create.</para>
    </step>
        <step>
        <para>In the New Module dialog box:</para>
         <substeps>
          <step>
           <para>In the Select Module drop-down menu, select <literal>DataStore</literal>.</para>
          </step>
          <step>
           <para>In the Select Criteria drop-down menu, select <literal>Required</literal>.</para>
          </step>
          <step>
           <para>Click OK.</para>
          </step>
         </substeps>

         <para> The Data Store authentication module checks the user
          credentials, whereas the Scripted authentication module does not check
          credentials, but instead only checks that the authentication request
          is processed during working hours. Without the Data Store module, the
          username in the Scripted authentication module could not be determined.</para>
    </step>
     <step><para>On the Edit Chain tab, click Add Module.</para></step>
     <step>
      <para>In the New Module dialog box:</para>
         <substeps>
          <step>
           <para>In the Select Module drop-down menu, select the Scripted Module from the previous
         procedure, for example <literal>myScriptedAuthModule</literal>.</para>
          </step>
          <step>
           <para>In the Select Criteria drop-down menu, select <literal>Required</literal>.</para>
          </step>
          <step>
           <para>Click OK.</para>
          </step>
         </substeps>
         <para>The resulting chain resembles the following:</para>
          <mediaobject>
   <alt>An example chain that uses the default server-side authentication script.</alt>
   <imageobject>
    <imagedata fileref="images/scripting-sample-chain.png" format="PNG" />
   </imageobject>
   <textobject>
    <para>Two modules are required: DataStore and Scripted Module - Server
     Side.</para>
   </textobject>
  </mediaobject>
    </step>
     <step><para>On the Edit Chain tab, click Save Changes.</para>

     </step>
 </procedure>
 </section>

 <section xml:id="scripted-auth-module-try-it-out">
  <title>Trying the Default Server-side Authentication Script</title>

  <para>
   This section shows how to log in using an authentication chain that contains a
   Scripted authentication module, which in turn uses the default server-side
   authentication script.
  </para>

<procedure>
 <title>To Login to OpenAM Using a Chain Containing a Scripted
  Authentication Module</title>
 <step><para>Log out of OpenAM.</para></step>
 <step>
<para>In a browser, navigate to the OpenAM login URL, and specify
 the authentication chain created in the previous procedure as the
 value of the <literal>service</literal> query parameter.</para>
  <para>For example:
   <screen>https://openam.example.com:8443/openam/XUI/#login/&amp;service=<replaceable>myScriptedChain</replaceable></screen></para>
 </step>
<step>

  <para>
   Log in as user <literal>demo</literal> with
   password <literal>changeit</literal>.
  </para>

  <para>
   If login is successful, the user profile page appears. The script will
   also output messages, such as the following
   in the <filename>debug/Authentication</filename> log file:
  </para>

  <programlisting language="none">
amScript:05/08/2015 11:31:21:835 AM CEST: Thread[pool-19-thread-5,5,main]
Starting server-side JavaScript
amScript:05/08/2015 11:31:21:837 AM CEST: Thread[pool-19-thread-5,5,main]
User: demo
amScript:05/08/2015 11:31:21:837 AM CEST: Thread[pool-19-thread-5,5,main]
Current time: 11
amScript:05/08/2015 11:31:21:837 AM CEST: Thread[pool-19-thread-5,5,main]
Authentication allowed!</programlisting>
 <tip><para>The default server-side authentication script outputs log
  messages at the <literal>message</literal> and
  <literal>error</literal> level. </para>   <para>
    OpenAM does not log debug messages from scripts by default.
    You can configure OpenAM to log such messages
    by setting the debug log level for the <literal>amScript</literal> service.
    For details, see
  <olink targetdoc="admin-guide" targetptr="log-debug-selective-capture"  />.
   </para></tip>
 </step>
 <step performance="optional"><para>To test that the script is being used as part of the login
  process,
  edit the script to alter the times when authentication is
  allowed:</para>
  <substeps>
   <step>
    <para>Log out the <literal>demo</literal> user.</para>
   </step>
    <step>
        <para>Log in as an OpenAM administrator, for example <literal>amadmin</literal>.</para>
    </step>
    <step>
        <para>Click REALMS &gt; Top Level Realm &gt; Scripts &gt; Scripted
         Module - Server Side.</para>
    </step>
       <step>
        <para>In the script, swap the values for
         <literal>START_TIME</literal> and <literal>END_TIME</literal>, for
         example:</para>
<screen>var START_TIME = 17;
var END_TIME   = 9; //</screen>
    </step>
          <step><para>Click Save.</para>
    </step>
   <step><para>Repeat steps 1, 2, and 3 above, logging into the module as
    the <literal>demo</literal> user as before. The authentication result
    will be the opposite of the previous result, as the allowed times have inverted.</para></step>
  </substeps>
 </step>
</procedure>
 </section>

</section>
